import { MagicString } from '@vue-macros/common';
import { TSType, CallExpression, Node } from '@babel/types';

declare const PROPS_VARIABLE_NAME: string;
type Edition = 'kevinEdition' | 'johnsonEdition';
type Impl = (ctx: {
    s: MagicString;
    offset: number;
    resolveTSType(type: TSType): Promise<string | undefined>;
}) => {
    walkCall(node: CallExpression, parent: Node): string;
    genRuntimeProps(): Promise<undefined | string>;
};
declare function transformDefineProp(code: string, id: string, edition?: Edition, isProduction?: boolean): Promise<{
    code: string;
    map: any;
} | undefined>;
declare const kevinEdition: Impl;
declare const johnsonEdition: Impl;
declare function stringifyArray(strs: string[]): string;

export { Edition as E, Impl as I, PROPS_VARIABLE_NAME as P, johnsonEdition as j, kevinEdition as k, stringifyArray as s, transformDefineProp as t };
